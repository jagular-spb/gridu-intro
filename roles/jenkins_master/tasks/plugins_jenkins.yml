---
    - name: Install plugins without a specific version
      jenkins_plugin:
       url: "{{jenkins_url}}"
       url_password: "{{vault_jenkins_password}}"
       url_username: "{{jenkins_url_username}}"
       name: "{{ item.key }}"
      register: jenkins_plugin_unversioned
      when: >
        'version' not in item.value
      with_dict: "{{ jenkins_plugins }}"
#      delegate_to: "{{delegate}}"

    - name: Initiate the fact
      set_fact:
        jenkins_restart_required: no

    - name: Check if restart is required by any of the unversioned plugins
      set_fact:
        jenkins_restart_required: yes
      when: item.changed
      with_items: "{{ jenkins_plugin_unversioned.results }}"

    - name: Restart Jenkins if required
      service:
        name: jenkins
        state: restarted
      when: jenkins_restart_required

    - name: Wait for Jenkins to start up
      uri:
        url: http://localhost:8080
        status_code: 200
        timeout: 5
      register: jenkins_service_status
      # Keep trying for 5 mins in 5 sec intervals
      retries: 60
      delay: 5
      until: >
         'status' in jenkins_service_status and
         jenkins_service_status['status'] == 200 || jenkins_service_status['status'] == 403
      when: jenkins_restart_required

    - name: Reset the fact
      set_fact:
        jenkins_restart_required: no
      when: jenkins_restart_required

    - name: Plugin enabling
      jenkins_plugin:
       url: "{{jenkins_url}}"
       url_password: "{{vault_jenkins_password}}"
       url_username: "{{jenkins_url_username}}"
       name: "{{ item.key }}"
       state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
      when: >
        'enabled' in item.value
      with_dict: "{{ jenkins_plugins }}"